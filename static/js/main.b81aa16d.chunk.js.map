{"version":3,"sources":["redux/selectors.js","components/Game/Game.js","redux/actions.js","redux/constants.js","components/TableGame/TableGame.js","App.js","redux/reducers/game.js","redux/reducers/index.js","redux/store.js","serviceWorker.js","index.js","components/Game/Game.module.scss","components/TableGame/TableGame.module.scss"],"names":["squareSelector","state","game","square","CurrentGamerSelector","currentGamer","winnerCombination","winSelector","createSelector","winner","forEach","item","a","b","c","value","counterXSelector","counterX","counterOSelector","counterO","drawSelector","filter","length","connect","draw","walk","id","dispatch","type","payload","newGame","getWinner","getState","className","styles","root","winStatus","onClick","onChange","again","map","key","props","gamer","resetCounters","score","grid","Game","propTypes","PropTypes","number","initialState","combineReducers","action","enhancer","applyMiddleware","thunk","createStore","reducers","composeWithDevTools","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.b81aa16d.chunk.js","sourcesContent":["import {createSelector} from 'reselect'\n\nexport const squareSelector = (state) => state.game.square;\nexport const CurrentGamerSelector = (state) => state.game.currentGamer;\n\nconst winnerCombination = [\n    [0, 1, 2],\n    [0, 3, 6],\n    [0, 4, 8],\n    [1, 4, 7],\n    [2, 4, 6],\n    [2, 5, 8],\n    [3, 4, 5],\n    [6, 7, 8],\n];\n\nexport const winSelector = createSelector(\n    squareSelector,\n    (square) => {\n        let winner = null;\n        winnerCombination.forEach(item => {\n            const [a, b, c] = item;\n            if (square[a].value === square[b].value && square[b].value === square[c].value && square[c].value !== null) {\n                winner = square[c].value;\n            }\n        });\n        return winner;\n    }\n);\n\nexport const counterXSelector = (state) => state.game.counterX;\nexport const counterOSelector = (state) => state.game.counterO;\n\nexport const drawSelector = createSelector(\n    squareSelector,\n    (square) => {\n        let arr = square.filter(item => {\n            return item.value !== null\n        });\n        if (arr.length === 9) {\n            return 'Draw'\n        }\n        return null\n    }\n);\n\n/*\n0,4,8 // 0 + 4 + 4\n0,1,2 // 0 + 1 + 1\n0,3,6 // 0 + 3 + 3\n\n2,4,6 // 2 + 2 + 2\n2,1,0 // 0 + 1 + 1\n2,5,8 // 2 + 3 + 3\n\n6,3,0 // 0 + 3 + 3\n6,7,8 // 6 + 1 + 1\n6,4,2 // 2 + 2 + 2\n\n8,4,0 // 0 + 4 + 4\n8,5,2 // 2 + 3 + 3\n8,7,6 // 6 + 1 + 1\n\n3,4,5 // 3 + 1 + 1\n5,4,3 // 3 + 1 + 1\n1,4,7 // 1 + 3 + 3\n7,1,4 // 1 + 3 + 3\n5,4,3 // 3 + 1 + 1\n\n------ sort\n\n0,1,2 // 0 + 1 + 1\n0,4,8 // 0 + 4 + 4\n0,3,6 // 0 + 3 + 3\n1,4,7 // 1 + 3 + 3\n2,4,6 // 2 + 2 + 2\n2,5,8 // 2 + 3 + 3\n3,4,5 // 3 + 1 + 1\n6,7,8 // 6 + 1 + 1\n */\n","import React from 'react';\nimport styles from './Game.module.scss'\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\nimport {\n    CurrentGamerSelector,\n    drawSelector,\n    squareSelector,\n    winSelector,\n} from '../../redux/selectors';\nimport {getWinner, newGame, walk} from '../../redux/actions';\n\nconst Game = ({square, currentGamer, walk, newGame, winner, getWinner, draw}) => {\n    return (\n        <div className={styles.root}>\n            {winner || draw ?\n                <div\n                    className={styles.winStatus}\n                    onClick={() => newGame()}\n                    onChange={getWinner(winner)}>\n                    <div>{winner ? `Winner: ${winner}` : draw}</div>\n                    <div className={styles.again}>Click to game again</div>\n                </div> : null}\n            <div className={styles.square}>\n                {square.map(item => {\n                    return <span key={item.id}\n                                 onClick={() => walk(item.id, item.value)}>{item.value}</span>\n                })}\n            </div>\n            <div className={styles.props}>\n                <div>\n                    <button onClick={() => newGame()}>Start new game</button>\n                </div>\n                <div className={styles.gamer}>Current Gamer: <b>{currentGamer}</b></div>\n            </div>\n        </div>\n    );\n};\n\nGame.propTypes = {\n    square: PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        value: PropTypes.string,\n    }).isRequired).isRequired,\n    currentGamer: PropTypes.string.isRequired,\n    walk: PropTypes.func.isRequired,\n    newGame: PropTypes.func.isRequired,\n    winner: PropTypes.string,\n    getWinner: PropTypes.func.isRequired,\n    draw: PropTypes.string,\n};\n\nexport default connect((state) => ({\n    square: squareSelector(state),\n    currentGamer: CurrentGamerSelector(state),\n    winner: winSelector(state),\n    draw: drawSelector(state),\n}), {\n    walk,\n    newGame,\n    getWinner,\n})(Game);\n","import {COUNT_WINNER_O, COUNT_WINNER_X, GET_WINNER, NEW_GAME, RESET_COUNTERS, WALK} from './constants';\nimport {drawSelector, winSelector} from './selectors';\n\nexport const walk = (id, value) => {\n    return (dispatch) => {\n        if (value === null) {\n            dispatch({type: WALK, payload: {id, value}})\n        }\n    };\n};\n\nexport const getWinner = (winner) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        if (winSelector(state)) {\n            dispatch({type: GET_WINNER, payload: {winner}});\n            if (winner === 'X') {\n                dispatch({type: COUNT_WINNER_X, payload: {winner}});\n            } else {\n                dispatch({type: COUNT_WINNER_O, payload: {winner}});\n            }\n        }\n        if (drawSelector(state) && !(winSelector(state))) {\n            dispatch({type: GET_WINNER, payload: {winner: drawSelector(state)}})\n        }\n    }\n};\n\nexport const newGame = () => ({\n    type: NEW_GAME,\n});\n\nexport const resetCounters = () => ({\n    type: RESET_COUNTERS,\n});\n","export const WALK = 'WALK';\nexport const NEW_GAME = 'NEW_GAME';\nexport const GET_WINNER = 'GET_WINNER';\nexport const COUNT_WINNER_X = 'COUNT_WINNER_X';\nexport const COUNT_WINNER_O = 'COUNT_WINNER_O';\nexport const RESET_COUNTERS = 'RESET_COUNTERS';\n","import React from 'react';\nimport styles from './TableGame.module.scss'\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\nimport {counterOSelector, counterXSelector} from '../../redux/selectors';\nimport {resetCounters} from '../../redux/actions';\n\nconst TableGame = ({counterX, counterO, resetCounters}) => {\n    return (\n        <div className={styles.root}>\n            <div className={styles.score}><span><button onClick={() => resetCounters()}>Reset counters</button></span> Score:</div>\n            <div className={styles.grid}>\n                <div>X score: <b>{counterX}</b></div>\n                <div>O score: <b>{counterO}</b></div>\n            </div>\n        </div>\n    );\n};\n\nTableGame.propTypes = {\n    counterX: PropTypes.number,\n    counterO: PropTypes.number,\n    resetCounters: PropTypes.func.isRequired,\n};\n\nexport default connect((state) => ({\n    counterX: counterXSelector(state),\n    counterO: counterOSelector(state),\n}), {\n    resetCounters\n})(TableGame);\n","import React from 'react';\r\nimport './App.css';\r\nimport Game from './components/Game';\r\nimport TableGame from './components/TableGame';\r\nimport {connect} from 'react-redux';\r\nimport {counterOSelector, counterXSelector} from './redux/selectors';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction App({counterX, counterO}) {\r\n  return (\r\n    <div className=\"App\">\r\n      <Game/>\r\n      {counterX !== 0 || counterO !== 0 ?\r\n          <TableGame/> : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nGame.propTypes = {\r\n    counterX: PropTypes.number,\r\n    counterO: PropTypes.number,\r\n};\r\n\r\nexport default connect((state) => ({\r\n    counterX: counterXSelector(state),\r\n    counterO: counterOSelector(state),\r\n}))(App);\r\n","import {COUNT_WINNER_O, COUNT_WINNER_X, GET_WINNER, NEW_GAME, RESET_COUNTERS, WALK} from '../constants';\n\nconst initialState = {\n    square: [\n        {id: 0, value: null}, {id: 1, value: null}, {id: 2, value: null},\n        {id: 3, value: null}, {id: 4, value: null}, {id: 5, value: null},\n        {id: 6, value: null}, {id: 7, value: null}, {id: 8, value: null},\n    ],\n    currentGamer: 'X',\n    winStatus: null,\n    counterX: 0,\n    counterO: 0,\n};\n\nexport default (state = initialState, action) => {\n    const {type, payload} = action;\n    switch (type) {\n        case WALK:\n            return {\n                ...state,\n                square: state.square.map(item => {\n                    if (item.id === payload.id) {\n                        return {\n                            id: item.id,\n                            value: state.currentGamer\n                        }\n                    }\n                    return item\n                }),\n                currentGamer: state.currentGamer === 'X' ? 'O' : 'X'\n            };\n        case NEW_GAME:\n            return {\n                ...state,\n                square: initialState.square,\n                currentGamer: 'X',\n                winStatus: null,\n            };\n        case GET_WINNER:\n            return {\n                ...state,\n                winStatus: payload.winner || 'Draw'\n            };\n        case COUNT_WINNER_X:\n            return {\n                ...state,\n                counterX: state.counterX + 1,\n            };\n        case COUNT_WINNER_O:\n            return {\n                ...state,\n                counterO: state.counterO + 1,\n            };\n        case RESET_COUNTERS:\n            return {\n                ...state,\n                counterX: 0,\n                counterO: 0,\n            };\n        default:\n            return state\n    }\n}\n","import { combineReducers } from 'redux';\nimport game from './game';\n\nexport default combineReducers({\n    game,\n});\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport reducers from './reducers';\r\n\r\nconst enhancer = applyMiddleware(\r\n  thunk,\r\n);\r\n\r\nexport default createStore(reducers, composeWithDevTools(enhancer));\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './redux/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Game_root__3piGo\",\"winStatus\":\"Game_winStatus__SidbG\",\"again\":\"Game_again__2AwU4\",\"square\":\"Game_square__12KFV\",\"props\":\"Game_props__2tGx_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"TableGame_root__C6Klt\",\"score\":\"TableGame_score__2Vf6x\",\"grid\":\"TableGame_grid__3-kAj\"};"],"sourceRoot":""}